name: CI/CD Pipeline

on:
  push:
    branches:
      - development
      - main
    paths:
      - 'django-app/**'
      - 'fastapi-app/**'
  pull_request:
    branches:
      - main
    paths:
      - 'django-app/**'
      - 'fastapi-app/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'The environment to deploy to'
        required: true
        default: 'development'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        run: aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 061039781993.dkr.ecr.us-east-2.amazonaws.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build and push FastAPI image
        run: |
          cd fastapi-app
          docker build -t fastapi-app .
          docker tag fastapi-app:latest 061039781993.dkr.ecr.us-east-2.amazonaws.com/fastapi-app:${{ github.ref_name }}
          docker push 061039781993.dkr.ecr.us-east-2.amazonaws.com/fastapi-app:${{ github.ref_name }}

      - name: Build and push Django image
        run: |
          cd django-app
          docker build -t django-app .
          docker tag django-app:latest 061039781993.dkr.ecr.us-east-2.amazonaws.com/django-app:${{ github.ref_name }}
          docker push 061039781993.dkr.ecr.us-east-2.amazonaws.com/django-app:${{ github.ref_name }}

      - name: Register ECS FastAPI Task Definition (Development)
        if: github.ref == 'refs/heads/development'
        run: |
          aws ecs register-task-definition \
            --family fastapi-task \
            --container-definitions '[{"name": "fastapi-container", "image": "061039781993.dkr.ecr.us-east-2.amazonaws.com/fastapi-app:${{ github.ref_name }}", "memory": 512, "cpu": 256, "essential": true}]' \
            --region us-east-2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Register ECS Django Task Definition (Development)
        if: github.ref == 'refs/heads/development'
        run: |
          aws ecs register-task-definition \
            --family django-task \
            --container-definitions '[{"name": "django-container", "image": "061039781993.dkr.ecr.us-east-2.amazonaws.com/django-app:${{ github.ref_name }}", "memory": 512, "cpu": 256, "essential": true}]' \
            --region us-east-2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Register ECS FastAPI Task Definition (Production)
        if: github.ref == 'refs/heads/main'
        run: |
          aws ecs register-task-definition \
            --family fastapi-task \
            --container-definitions '[{"name": "fastapi-container", "image": "061039781993.dkr.ecr.us-east-2.amazonaws.com/fastapi-app:${{ github.ref_name }}", "memory": 512, "cpu": 256, "essential": true}]' \
            --region us-west-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Register ECS Django Task Definition (Production)
        if: github.ref == 'refs/heads/main'
        run: |
          aws ecs register-task-definition \
            --family django-task \
            --container-definitions '[{"name": "django-container", "image": "061039781993.dkr.ecr.us-east-2.amazonaws.com/django-app:${{ github.ref_name }}", "memory": 512, "cpu": 256, "essential": true}]' \
            --region us-west-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Check and create ECS FastAPI service (Development)
        if: github.ref == 'refs/heads/development'
        run: |
          # Check if service exists
          SERVICE_ARN=$(aws ecs list-services --cluster development-cluster --region us-east-2 --query "serviceArns[?contains(@, 'fastapi-service-development')]" --output text)
          
          # Create the service if it does not exist
          if [ -z "$SERVICE_ARN" ]; then
            echo "Service not found. Creating the FastAPI service..."
            aws ecs create-service \
              --cluster development-cluster \
              --service-name fastapi-service-development \
              --task-definition fastapi-task \
              --desired-count 1 \
              --launch-type EC2 \
              --region us-east-2
          else
            echo "Service already exists."
          fi

          # Update the FastAPI service
          aws ecs update-service --cluster development-cluster --service fastapi-service-development --force-new-deployment --region us-east-2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Check and create ECS Django service (Development)
        if: github.ref == 'refs/heads/development'
        run: |
          # Check if service exists
          SERVICE_ARN=$(aws ecs list-services --cluster development-cluster --region us-east-2 --query "serviceArns[?contains(@, 'django-service-development')]" --output text)
          
          # Create the service if it does not exist
          if [ -z "$SERVICE_ARN" ]; then
            echo "Service not found. Creating the Django service..."
            aws ecs create-service \
              --cluster development-cluster \
              --service-name django-service-development \
              --task-definition django-task \
              --desired-count 1 \
              --launch-type EC2 \
              --region us-east-2
          else
            echo "Service already exists."
          fi

          # Update the Django service
          aws ecs update-service --cluster development-cluster --service django-service-development --force-new-deployment --region us-east-2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Check and create ECS FastAPI service (Production)
        if: github.ref == 'refs/heads/main'
        run: |
          # Check if service exists
          SERVICE_ARN=$(aws ecs list-services --cluster production-cluster --region us-west-1 --query "serviceArns[?contains(@, 'fastapi-service-production')]" --output text)
          
          # Create the service if it does not exist
          if [ -z "$SERVICE_ARN" ]; then
            echo "Service not found. Creating the FastAPI service..."
            aws ecs create-service \
              --cluster production-cluster \
              --service-name fastapi-service-production \
              --task-definition fastapi-task \
              --desired-count 1 \
              --launch-type EC2 \
              --region us-west-1
          else
            echo "Service already exists."
          fi

          # Update the FastAPI service
          aws ecs update-service --cluster production-cluster --service fastapi-service-production --force-new-deployment --region us-west-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Check and create ECS Django service (Production)
        if: github.ref == 'refs/heads/main'
        run: |
          # Check if service exists
          SERVICE_ARN=$(aws ecs list-services --cluster production-cluster --region us-west-1 --query "serviceArns[?contains(@, 'django-service-production')]" --output text)
          
          # Create the service if it does not exist
          if [ -z "$SERVICE_ARN" ]; then
            echo "Service not found. Creating the Django service..."
            aws ecs create-service \
              --cluster production-cluster \
              --service-name django-service-production \
              --task-definition django-task \
              --desired-count 1 \
              --launch-type EC2 \
              --region us-west-1
          else
            echo "Service already exists."
          fi

          # Update the Django service
          aws ecs update-service --cluster production-cluster --service django-service-production --force-new-deployment --region us-west-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}